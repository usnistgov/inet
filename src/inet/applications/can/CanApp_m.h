//
// Generated file, do not edit! Created by nedtool 5.2 from inet/applications/can/CanApp.msg.
//

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#ifndef __CANAPP_M_H
#define __CANAPP_M_H

#include <omnetpp.h>

// nedtool version check
#define MSGC_VERSION 0x0502
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of nedtool: 'make clean' should help.
#endif

// dll export symbol
#ifndef INET_API
#  if defined(INET_EXPORT)
#    define INET_API  OPP_DLLEXPORT
#  elif defined(INET_IMPORT)
#    define INET_API  OPP_DLLIMPORT
#  else
#    define INET_API
#  endif
#endif



// cplusplus {{
#include "inet/common/INETDefs.h"

#define CANAPP_CLI_SAP  0xf0
#define CANAPP_SRV_SAP  0xf1
// }}

/**
 * Class generated from <tt>inet/applications/can/CanApp.msg:33</tt> by nedtool.
 * <pre>
 * //
 * // Request packet sent by ~CanAppCli. Contains the number of bytes to be
 * // sent back as response; if this value is greater than ~1400, the reply
 * // will consist of several Cannet frames. See also ~CanAppResp.
 * //
 * packet CanAppReq
 * {
 *     long requestId;
 *     long responseBytes;
 * }
 * </pre>
 */
class INET_API CanAppReq : public ::omnetpp::cPacket
{
  protected:
    long requestId;
    long responseBytes;

  private:
    void copy(const CanAppReq& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const CanAppReq&);

  public:
    CanAppReq(const char *name=nullptr, short kind=0);
    CanAppReq(const CanAppReq& other);
    virtual ~CanAppReq();
    CanAppReq& operator=(const CanAppReq& other);
    virtual CanAppReq *dup() const override {return new CanAppReq(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
    virtual long getRequestId() const;
    virtual void setRequestId(long requestId);
    virtual long getResponseBytes() const;
    virtual void setResponseBytes(long responseBytes);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const CanAppReq& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, CanAppReq& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>inet/applications/can/CanApp.msg:42</tt> by nedtool.
 * <pre>
 * //
 * // Packet sent back by ~CanAppSrv in response to an ~CanAppReq.
 * //
 * packet CanAppResp
 * {
 *     int requestId;
 *     int numFrames;
 * }
 * </pre>
 */
class INET_API CanAppResp : public ::omnetpp::cPacket
{
  protected:
    int requestId;
    int numFrames;

  private:
    void copy(const CanAppResp& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const CanAppResp&);

  public:
    CanAppResp(const char *name=nullptr, short kind=0);
    CanAppResp(const CanAppResp& other);
    virtual ~CanAppResp();
    CanAppResp& operator=(const CanAppResp& other);
    virtual CanAppResp *dup() const override {return new CanAppResp(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
    virtual int getRequestId() const;
    virtual void setRequestId(int requestId);
    virtual int getNumFrames() const;
    virtual void setNumFrames(int numFrames);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const CanAppResp& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, CanAppResp& obj) {obj.parsimUnpack(b);}


#endif // ifndef __CANAPP_M_H

